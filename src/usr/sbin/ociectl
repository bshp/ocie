#!/bin/bash
    
# Custom config
if [[ ! -z "${OCIE_CONFIG}" ]];then
    if [[ -d "${OCIE_CONFIG}" ]];then
        if [[ -f "${OCIE_CONFIG}/config.ocie" ]];then
            . ${OCIE_CONFIG}/config.ocie;
        else
            echo "Ocie: Application config [ config.ocie ] not found in path [ ${OCIE_CONFIG} ]";
        fi;
    else
        echo "Ocie: Unable to load config, [ ${OCIE_CONFIG} ] is not a directory or not readable";
    fi;
else
    # Default config
    if [[ -f "${OCIE_LIB}/types/${APP_TYPE}.ocie" ]];then
        . ${OCIE_LIB}/types/${APP_TYPE}.ocie;
    else
        echo "Ocie: Application config not found in any available path, type: [ config.ocie ]";
        echo "Ocie: Create an 'config.ocie' in your application, set the environment OCIE_CONFIG, e.g OCIE_CONFIG=/etc/myapp/path_to_definition";
        exit 1;
    fi;
fi;
    
function show_help()
{
    echo "OCIE Application Control";
    echo
    echo "Syntax: ociectl [ --reload | --run | --stop ]";
    echo
    echo "Parameters:";
    echo
    echo "--reload   Reload the application";
    echo
    echo "--run      Run the application";
    echo
    echo "--stop     Stop the application";
    echo
    echo "--test     Test the applications config";
    echo
}
    
function check_volumes()
{
    if [[ ! -z "${APP_VOLS}" ]];then
        echo "Ocie: Application has defined volumes";
        unmapped="";
        vols=$(cat /proc/mounts);
        for vol in ${APP_VOLS//:/ };do
            mounted=$(echo "$vols" | grep -Eo ".*${vol}.*$");
            if [[ ! -z "${mounted}" ]];then
                echo "Ocie: Application volume [ ${vol} ] is NOT mapped";
                unmapped+="${vol}, ";
            fi;
        done;
        if [[ ! -z "${unmapped}" == 1 ]];then
            echo "Ocie: Application needs to store persistant data and the volumes listed are not mapped:";
            echo "  Unmapped Volumes: [ ${unmapped%, } ]";
            echo "Ocie: Each volume should be mapped at runtime , e.g --volume my_vol:/example/path";
            echo "Ocie: If this is a development environment, set --env|-e APP_ENV='dev' to mute this warning";
        fi;
    fi;
}
    
function ocie_shutdown()
{
    echo "Ocie: Recieved stop signal, attemtping to terminate application gracefully";
    app_shutdown;
    echo "Ocie: Application stopped with exit code [ $? ], shutting down..";
    exit 0;
}
    
function ocie_certs()
{
    if [[ "${CA_ENABLED}" == 1 ]];then
        if [[ $(type -t app_certs) == function ]];then
            app_certs;
        fi;
    else
        echo "Ocie: CA Import is DISABLED, set CA_ENABLED=1 in order activate, skipping..";
    fi;
}
    
function ocie_config()
{
    if [[ $(type -t app_config) == function ]];then
        app_config;
    fi;
}
    
function ocie_keys()
{
    if [[ "${CERT_ENABLED}" == 1 ]];then
        if [[ $(type -t app_keys) == function ]];then
            app_keys;
        fi;
    else
        echo "Ocie: Certificate keygen is DISABLED, set CERT_ENABLED=1 in order activate, skipping..";
    fi;
}
    
function ocie_deploy()
{
    if [[ "${APP_DEPLOY}" == 1 ]];then
        if [[ $(type -t app_deploy) == function ]];then
            app_deploy;
        fi;
    else
        echo "Ocie: App Deployment/Update is DISABLED, set APP_DEPLOY=1 in order activate, skipping..";
    fi;
}
    
function ocie_test()
{
    if [[ $(type -t app_test) == function ]];then
        echo $(app_test);
    fi;
}
    
function ocie_reload()
{
    echo "Ocie: Reloading application";
    app_reload &
    wait
}
    
function ocie_start()
{
    ocie_certs;
    ocie_keys;
    ocie_config;
    ocie_deploy;
    RUNAS="${APP_OWNER}";
    if [[ "${APP_ENV}" == "prod" ]];then
        check_volumes;
    fi;
    # DISA STIG V-222986, Tomcat owner is root but runas is tomcat
    if [[ "${APP_TYPE}" == "tomcat" ]];then
        RUNAS="tomcat";
    fi;
    if [[ "${RUNAS}" == "root" ]];then
        echo "Ocie: Application is set to run as [ root ], set APP_OWNER to change the account";
    else
        echo "Ocie: Application will run as [ ${RUNAS} ] OR you can set APP_OWNER to [ root ] and risk it for the biscuit";
    fi;
    echo "Ocie: Initialization complete, starting container";
    app_start &
    wait
}
    
# Shutdown - SIGINT, SIGTERM, SIGWINCH
trap ocie_shutdown 2 15 28
    
for cmds in "$@";do
    shift;
    case "$cmds" in
        '--help')
            show_help;;
        '--reload')
            ocie_reload;;
        '--run')
            ocie_start;;
        '--stop')
            ocie_shutdown;;
        '--test')
            ocie_test;;
        *);;
    esac;
done;
